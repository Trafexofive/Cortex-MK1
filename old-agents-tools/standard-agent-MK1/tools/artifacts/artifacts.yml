ArtifactsTools:
  ArtifactsManager:
    name: "artifacts"
    description: >
      # 🗄️ Artifacts Manager

      High-performance persistent storage for the AI ecosystem. The Artifacts Manager provides 
      a robust SQLite-based storage system with advanced features for maintaining structured data
      across sessions, with minimal configuration required.

      ## Core Capabilities
      - **Content Deduplication**: Automatic SHA-256 content hashing prevents duplicate storage
      - **Smart Compression**: Transparent zlib compression for artifacts >1KB (when beneficial)
      - **Tag Organization**: Flexible tagging system for organization and filtering
      - **Access Analytics**: Built-in tracking of artifact usage patterns
      - **Database Location**: Relative to tool module folder with environment variable override

      ## 💡 Usage Strategies

      **For Storing Session State**:
      - Use `create` with agent context variables to persist data between interactions
      - Example: `{"operation": "create", "data": {"conversation_state": {...}}, "tags": ["session_state"]}`
      - Retrieve with: `{"operation": "list", "tags": ["session_state"], "limit": 1}`

      **For Knowledge Management**:
      - Create artifacts with descriptive tags to build a knowledge repository
      - Tag structure suggestion: [content_type, domain, importance, date]
      - Filter precisely: `{"operation": "list", "tags": ["document", "finance", "high_priority"]}`

      **For Content Versioning**:
      - Use update operation with timestamp tags to maintain versions
      - Example tag pattern: `["config", "v1.2", "2025-07"]`

      ## ⚙️ New Features
      - **Partial Updates**: Update only content or only tags with the same API call
      - **Tag Merging**: Optional merging of tags when duplicate content is detected
      - **Environment Configuration**: Fully configurable via .env variables
      - **Multi-tag Filtering**: Filter artifacts that contain multiple specific tags

      ## 📚 Philosophy
      The Artifacts Manager is designed to be a foundational tool for AI agents, providing a Gateway to persistent, structured data storage. It emphasizes simplicity, performance, and flexibility, allowing agents to focus on their core tasks without worrying about data management complexities. Be mindful of what is stored, tag critical Master Knowledge/data (eg. TODOs, recipes, etc.), tagging agent generated content, in which you have full control over (morph, update, delete, etc.).

    type: "script"
    runtime: "python3"
    path: "./scripts/artifacts_tool.py"
    parameters_schema:
      type: "object"
      properties:
        operation:
          type: "string"
          enum: ["create", "read", "update", "delete", "list", "stats"]
          description: "Operation to perform on the artifacts database"
        artifact_id:
          type: "string"
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
          description: "UUID of the artifact (required for read/update/delete operations)"
        data:
          type: "object"
          description: "Artifact content as JSON object (required for create, optional for update)"
        tags:
          type: "array"
          items:
            type: "string"
            maxLength: 64
          maxItems: 32
          description: "Tags for organization and filtering (optional for create/update)"
        merge_tags:
          type: "boolean"
          description: "When true, merges new tags with existing tags on duplicate content (create operation)"
        limit:
          type: "integer"
          minimum: 1
          maximum: 1000
          default: 100
          description: "Maximum number of artifacts to return (list operation)"
        offset:
          type: "integer"
          minimum: 0
          default: 0
          description: "Number of artifacts to skip for pagination (list operation)"
        tag:
          type: "string"
          maxLength: 64
          description: "Filter artifacts by a single specific tag (list operation)"
      required: ["operation"]
      additionalProperties: false
    example_usage:
      - operation: "create"
        data:
          type: "configuration"
          name: "agent_config"
          settings:
            timeout: 30
            retries: 3
        tags: ["config", "agent", "production"]
      - operation: "create"
        data:
          user_preferences: {
            theme: "dark",
            notifications: true
          }
        tags: ["user_state"]
        merge_tags: true
      - operation: "read"
        artifact_id: "550e8400-e29b-41d4-a716-446655440000"
      - operation: "update"
        artifact_id: "550e8400-e29b-41d4-a716-446655440000"
        tags: ["config", "updated"]
      - operation: "list"
        tags: ["config", "production"]
        limit: 50
        offset: 0
      - operation: "stats"
    context_variable_example:
      operation: "create"
      data:
        source_agent: "$(agent_name)"
        timestamp: "$(current_datetime)"
        task_id: "$(task_id)"
        execution_context:
          user: "$(user_id)"
          session: "$(session_id)"
        payload:
          description: "Artifact generated from agent execution context"
          metadata:
            created_by: "$(agent_name)"
            environment: "$(environment)"
      tags: ["auto-generated", "$(agent_name)", "$(environment)"]
    response_format:
      create:
        artifact_id: "string (UUID)"
        success: "boolean"
        operation: "string"
      read:
        id: "string (UUID)"
        content: "object"
        metadata: "object"
        tags: "array of strings"
        stats:
          size: "integer (bytes)"
          compressed: "boolean"
          created_at: "number (unix timestamp)"
          updated_at: "number (unix timestamp)"
          access_count: "integer"
          content_hash: "string (SHA-256)"
        success: "boolean"
      update:
        success: "boolean"
        operation: "string"
        artifact_id: "string (UUID)"
      delete:
        success: "boolean"
        operation: "string"
        artifact_id: "string (UUID)"
      list:
        artifacts:
          - id: "string (UUID)"
            size: "integer (bytes)"
            created_at: "number (unix timestamp)"
            updated_at: "number (unix timestamp)"
            access_count: "integer"
            tags: "array of strings"
        total: "integer"
        limit: "integer"
        offset: "integer"
        has_more: "boolean"
        success: "boolean"
        operation: "string"
      stats:
        total_artifacts: "integer"
        total_size_bytes: "integer"
        average_size_bytes: "number"
        compressed_artifacts: "integer"
        total_accesses: "integer"
        unique_tags: "integer"
        oldest_artifact: "number (unix timestamp)"
        newest_artifact: "number (unix timestamp)"
        database_size_bytes: "integer"
        success: "boolean"
        operation: "string"
    error_handling:
      common_errors:
        - "ArtifactNotFoundError: The requested artifact does not exist"
        - "ArtifactError: Database operation failed or invalid parameters provided"
        - "UnexpectedError: System-level error occurred"
      error_response:
        error: "string (error message)"
        success: "boolean (false)"
        error_type: "string (error category)"
        artifact_id: "string (UUID, if applicable)"
    performance_notes:
      - "Compression automatically applied to artifacts > 1KB (when beneficial)"
      - "Content deduplication prevents storage of identical data"
      - "WAL mode enables concurrent read/write operations"
      - "Database auto-vacuum every 1000 operations (configurable)"
      - "Recommended batch size for bulk operations: 100-500 artifacts"
      - "Maximum recommended artifact size: 10MB"
    security_considerations:
      - "Artifacts stored in local SQLite database"
      - "Content hashing prevents data corruption"
      - "No encryption at rest (implement filesystem-level encryption if needed)"
      - "Tag and content validation prevents injection attacks"
      - "Environment variables can override default configuration paths"
