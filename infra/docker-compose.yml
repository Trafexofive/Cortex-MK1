# ==============================================================================
# PROJECT: CORTEX-PRIME - DOCKER COMPOSE MANIFEST v2.0 (Restructured)
#
# This version reflects the new modular directory structure, consolidating all
# services under the top-level /services directory.
# ==============================================================================

x-common-labels: &common-labels
  labels:
    project: "${PROJECT_NAME:-cortex-prime}"
    owner: "PRAETORIAN_CHIMERA"

x-common-env: &common-env
  env_file:
    - ./env/.env

services:

  neo4j:
    <<: *common-labels
    image: neo4j:5.14-community
    container_name: ${PROJECT_NAME}_neo4j_mk1
    restart: unless-stopped
    ports:
      - "${NEO4J_HTTP_HOST_PORT:-7474}:7474"
      - "${NEO4J_BOLT_HOST_PORT:-7687}:7687"
    environment:
      NEO4J_ACCEPT_LICENSE_AGREEMENT: "yes"
      NEO4J_AUTH: "${NEO4J_USER}/${NEO4J_PASSWORD}"
      NEO4J_PLUGINS: '["apoc"]'
    volumes:
      - neo4j_data:/data
    networks:
      - cortex_prime_network
    healthcheck:
      test: ["CMD-SHELL", "cypher-shell -u ${NEO4J_USER} -p ${NEO4J_PASSWORD} 'RETURN 1'"]
      interval: 5s
      timeout: 5s
      retries: 2
      start_period: 20s

  redis:
    <<: [*common-labels, *common-env]
    image: redis:7-alpine
    container_name: ${PROJECT_NAME}_redis_mk1
    restart: unless-stopped
    ports:
      - "${REDIS_HOST_PORT:-6380}:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    networks:
      - cortex_prime_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # --- CORE LOGIC & INTERFACES ---
  chimera_core:
    <<: [*common-labels, *common-env]
    build:
      context: ./services/chimera_core
      dockerfile: Dockerfile
    container_name: ${PROJECT_NAME}_chimera_core_mk1
    restart: unless-stopped
    depends_on:
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
      llm_gateway:
        condition: service_healthy
    ports:
      - "${CHIMERA_CORE_HOST_PORT:-8001}:8001"
    volumes:
      - ./services/chimera_core:/app
      - ./agents:/app/agents:ro
      - ./tools:/app/tools:ro
      - ./relics:/app/relics:ro
      - ./connectors:/app/connectors:ro
      - ./voice:/app/voice:ro
      - ./data:/app/data
    devices:
      - /dev/snd:/dev/snd
    networks:
      - cortex_prime_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8001/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  api_gateway:
    <<: [*common-labels, *common-env]
    build:
      context: ./services/api_gateway
      dockerfile: Dockerfile
    container_name: ${PROJECT_NAME}_api_gateway_mk1
    restart: unless-stopped
    depends_on:
      - chimera_core
    ports:
      - "${GATEWAY_HOST_PORT:-8080}:8080"
    networks:
      - cortex_prime_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  llm_gateway:
    <<: [*common-labels, *common-env]
    build:
      context: ./services/llm_gateway
      dockerfile: Dockerfile
    container_name: ${PROJECT_NAME}_llm_gateway_mk1
    restart: unless-stopped
    ports:
      - "${LLM_GATEWAY_HOST_PORT:-8081}:8080"
    networks:
      - cortex_prime_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # --- MANIFEST MANAGEMENT ---
  manifest_ingestion:
    <<: [*common-labels, *common-env]
    build:
      context: ./services/manifest_ingestion
      dockerfile: Dockerfile
    container_name: ${PROJECT_NAME}_manifest_ingestion_mk1
    restart: unless-stopped
    ports:
      - "${MANIFEST_INGESTION_HOST_PORT:-8082}:8082"
    volumes:
      - ./services/manifest_ingestion:/app
      - ./manifests:/app/manifests:ro
      - ./data/manifest_cache:/app/cache
    networks:
      - cortex_prime_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8082/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # --- RUNTIME EXECUTION ---
  runtime_executor:
    <<: [*common-labels, *common-env]
    build:
      context: ./services/runtime_executor
      dockerfile: Dockerfile
    container_name: ${PROJECT_NAME}_runtime_executor_mk1
    restart: unless-stopped
    depends_on:
      manifest_ingestion:
        condition: service_healthy
    ports:
      - "${RUNTIME_EXECUTOR_HOST_PORT:-8083}:8083"
    volumes:
      - ./services/runtime_executor:/app
      - ./manifests:/app/manifests:ro
      - ./data/execution_cache:/app/cache
      - /tmp:/tmp:rw  # Temp directory for secure execution
    networks:
      - cortex_prime_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8083/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Commenting out services that don't exist yet
  # agent_factory:
  #   <<: [*common-labels, *common-env]
  #   build:
  #     context: ./services/agent_factory
  #     dockerfile: Dockerfile
  #   container_name: ${PROJECT_NAME}_agent_factory_mk1
  #   restart: unless-stopped
  #   networks:
  #     - cortex_prime_network

  # tool_factory:
  #   <<: [*common-labels, *common-env]
  #   build:
  #     context: ./services/tool_factory
  #     dockerfile: Dockerfile
  #   container_name: ${PROJECT_NAME}_tool_factory_mk1
  #   restart: unless-stopped
  #   networks:
  #     - cortex_prime_network

  # chronicle:
  #   <<: [*common-labels, *common-env]
  #   build:
  #     context: ./services/chronicle
  #     dockerfile: Dockerfile
  #   container_name: ${PROJECT_NAME}_chronicle_mk1
  #   restart: unless-stopped
  #   networks:
  #     - cortex_prime_network

  # --- CHAT TEST SERVICE (MVP) ---
  chat_test:
    <<: [*common-labels, *common-env]
    build:
      context: ./services/chat_test
      dockerfile: Dockerfile
    container_name: ${PROJECT_NAME}_chat_test_mk1
    restart: unless-stopped
    depends_on:
      llm_gateway:
        condition: service_healthy
    ports:
      - "${CHAT_TEST_HOST_PORT:-8888}:8888"
    volumes:
      - ./services/chat_test:/app
    networks:
      - cortex_prime_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8888/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  web_client:
    <<: [*common-labels]
    image: nginx:alpine
    container_name: ${PROJECT_NAME}_web_client_mk1
    restart: unless-stopped
    ports:
      - "${WEB_CLIENT_HOST_PORT:-8889}:80"
    volumes:
      - ./services/web_client/index.html:/usr/share/nginx/html/index.html:ro
      - ./services/web_client/style.css:/usr/share/nginx/html/style.css:ro
      - ./services/web_client/client.js:/usr/share/nginx/html/client.js:ro
      - ./services/web_client/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - cortex_prime_network

networks:
  cortex_prime_network:
    driver: bridge
    name: ${PROJECT_NAME}_network

volumes:
  neo4j_data:
    name: ${PROJECT_NAME}_neo4j_data
  redis_data:
    name: ${PROJECT_NAME}_redis_data