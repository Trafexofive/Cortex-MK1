# config/tools/core.unrestricted_filesystem.yml
# Unrestricted Filesystem operations tool for the Chimera Ecosystem.
# Allows direct use of relative or absolute paths. USE WITH CAUTION.

FilesystemTools:
  UnrestrictedFilesystemManager:
    name: "filesystem_unrestricted"
    description: >
      Powerful filesystem manipulation tool that provides unrestricted access to the file system.
      
      ‚ö†Ô∏è SAFETY CONSIDERATIONS ‚ö†Ô∏è
      - This tool has no workspace boundaries - use absolute paths with extreme caution
      - Always verify paths before destructive operations (delete, overwrite)
      - Consider using 'backup: true' when modifying critical files
      - For destructive operations, use 'safe_delete: true' when appropriate
      - Other than that, make sure to FAAFO.
      
      üîç READING OPERATIONS
      - read_file: Read file contents with flexible options
        Examples: 
          - Basic: operation: "read_file", path: "./config.json"
          - With line numbers: operation: "read_file", path: "./logs.txt", include_line_numbers: true
          - Specific lines: operation: "read_file", path: "./server.log", line_range: "10-20"
          - First/last lines: operation: "read_file", path: "./error.log", head: 20 (or tail: 20)
      
      - read_directory_recursive: Recursively gather contents of files
        Example: operation: "read_directory_recursive", path: "./src", pattern: "*.js", exclude_dirs: ["node_modules"]
      
      - list_directory: View directory contents
        Examples:
          - Basic: operation: "list_directory", path: "./data"
          - Advanced: operation: "list_directory", path: "./src", recursive: true, include_content: true, pattern: "*.py"
      
      - search_files: Find text patterns across multiple files
        Example: operation: "search_files", path: "./src", pattern: "*.js", content_pattern: "function init", context_lines: 2
      
      ‚úçÔ∏è WRITING OPERATIONS
      - create_file: Create new files
        Examples:
          - Text file: operation: "create_file", path: "./notes.txt", content: "Meeting notes"
          - With permissions: operation: "create_file", path: "./script.sh", content: "#!/bin/bash", mode: "755"
          - Binary file: operation: "create_file", path: "./image.png", content: "[base64 data]", base64_encoded: true
      
      - update_file: Modify existing files
        Examples:
          - Overwrite: operation: "update_file", path: "./config.json", content: "{}"
          - Append: operation: "update_file", path: "./log.txt", content: "New entry", append: true
          - Line insertion: operation: "update_file", path: "./code.js", insert_at_line: 5, content: "// TODO: Fix bug"
          - Replace lines: operation: "update_file", path: "./README.md", replace_line_range: "5-10", content: "Updated section"
          - Search/replace: operation: "update_file", path: "./index.html", search_replace: [{search: "v1.0", replace: "v2.0"}]
      
      üìÅ DIRECTORY OPERATIONS
      - create_directory: Create directories
        Example: operation: "create_directory", path: "./data/processed", parents: true
      
      - delete_directory: Remove directories
        Examples:
          - Safe: operation: "delete_directory", path: "./temp", recursive: true, safe_delete: true
          - Force: operation: "delete_directory", path: "./cache", force: true
      
      üîÑ COPY/MOVE OPERATIONS
      - copy_item: Copy files or directories
        Example: operation: "copy_item", source: "./template.html", destination: "./pages/new.html"
      
      - move_item: Move or rename files/directories
        Example: operation: "move_item", source: "./draft.md", destination: "./published/article.md"
      
      ‚ÑπÔ∏è INFORMATION OPERATIONS
      - item_exists: Check if file/directory exists
        Example: operation: "item_exists", path: "./config.json", check_type: "file"
      
      - get_item_info: Get detailed file/directory metadata
        Example: operation: "get_item_info", path: "./document.pdf", calculate_hash: true, include_mime_type: true
      
      - calculate_directory_size: Analyze directory contents
        Example: operation: "calculate_directory_size", path: "./project", include_hidden: true
      
      ‚ö° BATCH OPERATIONS
      - batch_operation: Perform operations on multiple files
        Example: operation: "batch_operation", batch_operation: "delete", pattern: "*.tmp", base_path: "./temp"

    type: "script"
    runtime: "python3"
    path: "./scripts/filesystem_tool.py"
    parameters_schema:
      type: "object"
      properties:
        operation:
          type: "string"
          enum: [
            "create_file", "read_file", "read_directory_recursive", "search_files",
            "update_file", "delete_file", "create_directory", "list_directory", 
            "delete_directory", "move_item", "copy_item", "item_exists", 
            "get_item_info", "calculate_directory_size", "batch_operation"
          ]
          description: "The filesystem operation to perform."
        path:
          type: "string"
          description: "Path for the operation (relative or absolute)."
        content:
          type: "string"
          description: "Content for the file. (For create_file, update_file)"
        encoding:
          type: "string"
          default: "utf-8"
          description: "Encoding to use for reading/writing text files. (For create_file, read_file, update_file)"
        base64_encoded:
          type: "boolean"
          default: false
          description: "If true, treat content as base64-encoded binary data. (For create_file, update_file)"
        as_base64:
          type: "boolean"
          default: false
          description: "If true, return content as base64-encoded string. (For read_file)"
        include_line_numbers:
          type: "boolean"
          default: false
          description: "If true, include line numbers in output. (For read_file, read_directory_recursive, list_directory)"
        line_range:
          type: "string"
          description: "Range of lines to read, format: 'start-end'. (For read_file)"
        line_numbers:
          type: "array"
          items:
            type: "integer"
          description: "Specific line numbers to read. (For read_file)"
        head:
          type: "integer"
          description: "Number of lines to read from the beginning. (For read_file)"
        tail:
          type: "integer"
          description: "Number of lines to read from the end. (For read_file)"
        overwrite:
          type: "boolean"
          default: false
          description: "If true, overwrite file/directory if it exists. (For create_file, copy_item, move_item)"
        mode:
          type: ["string", "integer"]
          description: "Permissions mode to set (octal format like '644'). (For create_file, create_directory)"
        append:
          type: "boolean"
          default: false
          description: "If true, append content to file; otherwise, overwrite. (For update_file)"
        create_if_missing:
          type: "boolean"
          default: true
          description: "If true, create the file if it doesn't exist. (For update_file)"
        line_ending:
          type: "string"
          enum: ["lf", "crlf"]
          description: "Line ending format to use. (For update_file)"
        backup:
          type: "boolean"
          default: false
          description: "If true, create backup before modifying file. (For update_file)"
        insert_at_line:
          type: "integer"
          description: "Line number to insert content at. (For update_file)"
        replace_line_range:
          type: "string"
          description: "Range of lines to replace, format: 'start-end'. (For update_file)"
        search_replace:
          type: "array"
          items:
            type: "object"
            properties:
              search:
                type: "string"
              replace:
                type: "string"
              count:
                type: "integer"
              case_sensitive:
                type: "boolean"
          description: "List of search and replace operations. (For update_file)"
        parents:
          type: "boolean"
          default: true
          description: "If true, create parent directories if they don't exist. (For create_directory)"
        recursive:
          type: "boolean"
          default: false
          description: "If true, perform operation recursively. (For delete_directory, search_files, batch_operation, list_directory)"
        force:
          type: "boolean"
          default: false
          description: "If true, force operation even on non-empty directories. (For delete_directory)"
        quiet:
          type: "boolean"
          default: false
          description: "If true, don't error if item doesn't exist. (For delete_file, delete_directory)"
        safe_delete:
          type: "boolean"
          default: false
          description: "If true, move to trash instead of deleting. (For delete_file, delete_directory)"
        secure_wipe:
          type: "boolean"
          default: false
          description: "If true, securely overwrite file before deleting. (For delete_file)"
        wipe_passes:
          type: "integer"
          default: 3
          description: "Number of overwrite passes for secure wipe. (For delete_file)"
        include_content:
          type: "boolean"
          default: false
          description: "If true, include file contents in the results. (For list_directory)"
        source_path:
          type: "string"
          description: "Source path for move/copy operations. (For move_item, copy_item)"
        destination_path:
          type: "string"
          description: "Destination path for move/copy operations. (For move_item, copy_item)"
        source:
          type: "string"
          description: "Alternative source path parameter. (For move_item, copy_item)"
        destination:
          type: "string"
          description: "Alternative destination path parameter. (For move_item, copy_item)"
        create_parents:
          type: "boolean"
          default: true
          description: "If true, create parent directories for destination. (For move_item, copy_item)"
        preserve_metadata:
          type: "boolean"
          default: true
          description: "If true, preserve timestamps and permissions. (For move_item, copy_item)"
        symlinks:
          type: "boolean"
          default: false
          description: "If true, follow symlinks when copying. (For copy_item)"
        ignore_patterns:
          type: "array"
          items:
            type: "string"
          description: "Patterns to ignore when copying directories. (For copy_item)"
        pattern:
          type: "string"
          description: "File pattern for matching files. (For search_files, read_directory_recursive, list_directory, delete_file)"
        content_pattern:
          type: "string"
          description: "Regular expression pattern for searching file contents. (For search_files)"
        context_lines:
          type: "integer"
          default: 0
          description: "Number of context lines to show before/after matches. (For search_files)"
        whole_word:
          type: "boolean"
          default: false
          description: "If true, match whole words only. (For search_files)"
        case_sensitive:
          type: "boolean"
          default: false
          description: "If true, perform case-sensitive search. (For search_files)"
        max_results:
          type: "integer"
          default: 100
          description: "Maximum number of results to return. (For search_files)"
        max_files:
          type: "integer" 
          default: 100
          description: "Maximum number of files to process. (For read_directory_recursive)"
        max_depth:
          type: "integer"
          default: 10
          description: "Maximum recursion depth for directory operations. (For read_directory_recursive, list_directory)"
        exclude_dirs:
          type: "array"
          items:
            type: "string"
          description: "Directories to exclude. (For read_directory_recursive)"
        exclude_patterns:
          type: "array"
          items:
            type: "string"
          description: "File patterns to exclude. (For read_directory_recursive)"
        include_binary:
          type: "boolean"
          default: false
          description: "If true, include binary files in results. (For read_directory_recursive)"
        max_file_size_kb:
          type: "integer"
          default: 1024
          description: "Maximum file size in KB to process. (For read_directory_recursive, list_directory)"
        include_stats:
          type: "boolean"
          default: true
          description: "If true, include detailed stats for each item. (For list_directory)"
        include_hidden:
          type: "boolean"
          default: false
          description: "If true, include hidden files/directories. (For list_directory, calculate_directory_size, search_files)"
        sort_by:
          type: "string"
          enum: ["name", "size", "type", "mtime", "depth"]
          default: "name"
          description: "Field to sort results by. (For list_directory)"
        sort_order:
          type: "string"
          enum: ["asc", "desc"]
          default: "asc"
          description: "Sort order for results. (For list_directory)"
        calculate_hash:
          type: "boolean"
          default: false
          description: "If true, calculate file hash. (For get_item_info)"
        hash_algorithm:
          type: "string"
          enum: ["md5", "sha1", "sha256"]
          default: "md5"
          description: "Hash algorithm to use. (For get_item_info)"
        check_type:
          type: "string"
          enum: ["file", "directory"]
          description: "Type to validate existence against. (For item_exists)"
        include_mime_type:
          type: "boolean"
          default: false
          description: "If true, include MIME type detection. (For get_item_info)"
        preview_text_content:
          type: "boolean"
          default: false
          description: "If true, include file content preview. (For get_item_info)"
        preview_lines:
          type: "integer"
          default: 10
          description: "Number of lines to include in preview. (For get_item_info)"
        detailed_dir_info:
          type: "boolean"
          default: false
          description: "If true, include detailed directory information. (For get_item_info)"
        batch_operation:
          type: "string"
          enum: ["delete", "touch", "ensure_directories"]
          description: "Operation to perform on multiple files. (For batch_operation)"
        paths:
          type: "array"
          items:
            type: "string"
          description: "List of paths to process. (For batch_operation)"
        base_path:
          type: "string"
          default: "."
          description: "Base directory for relative paths. (For batch_operation)"
      required: ["operation"]
    example_usage:
      # Enhanced file read example with line selection
      - operation: "read_file"
        path: "./config/settings.json"
        include_line_numbers: true
        line_range: "10-20"
      
      # Enhanced file update with targeted line editing
      - operation: "update_file"
        path: "./src/main.js"
        insert_at_line: 5
        content: "// New configuration settings"
        backup: true
      
      # Search and replace in files
      - operation: "update_file"
        path: "./README.md"
        search_replace:
          - search: "old version"
            replace: "new version"
            case_sensitive: false
      
      # Binary file handling with base64
      - operation: "create_file"
        path: "./images/logo.png"
        content: "iVBORw0KGgoAAAANSUhEUgA..."  # Base64 content
        base64_encoded: true
      
      # Enhanced directory listing with recursive and content
      - operation: "list_directory"
        path: "./src"
        recursive: true
        include_content: true
        include_line_numbers: true
        max_depth: 3
        pattern: "*.js"
        sort_by: "depth"
      
      # Advanced file search with context
      - operation: "search_files"
        path: "./src"
        pattern: "*.js"
        content_pattern: "function init"
        recursive: true
        context_lines: 2
        whole_word: true
